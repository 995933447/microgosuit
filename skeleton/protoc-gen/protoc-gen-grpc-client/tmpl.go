package main

var rpcFileHeadTemplate = `// Code generated by protoc-gen-grpc-client. DO NOT EDIT.
package {{.ServiceNamespace}}

import (
	"sync"

	"github.com/995933447/microgosuit/grpcsuit"
	{{- if .ShouldImportContext }}
	"context"
	{{- end }}
	"google.golang.org/grpc"
)

`

var rpcFileDefineServiceTemplate = `
const MicrogosuitPbServiceName{{.ServiceName}} = "{{.ServiceNamespace}}.{{.ServiceName}}"

var (
	dial{{.ServiceName}}Opts                  []grpc.DialOption
	dial{{.ServiceName}}OptsMergedDefault     []grpc.DialOption
	dial{{.ServiceName}}OptsMergedDefaultOnce sync.Once
)

func RegisterDial{{.ServiceName}}Opts(opts ...grpc.DialOption) {
	dial{{.ServiceName}}Opts = append(dial{{.ServiceName}}Opts, opts...)
	dial{{.ServiceName}}OptsMergedDefault = nil
}

func GetDial{{.ServiceName}}Opts() []grpc.DialOption {
	dial{{.ServiceName}}OptsMergedDefaultOnce.Do(func() {
		globalDialOpts := grpcsuit.GetCustomizedOptsMergedDefault()
		dial{{.ServiceName}}OptsMergedDefault = make([]grpc.DialOption, 0, len(globalDialOpts)+len(dial{{.ServiceName}}Opts))
		dial{{.ServiceName}}OptsMergedDefault = append(append(dial{{.ServiceName}}OptsMergedDefault, globalDialOpts...), dial{{.ServiceName}}Opts...)
	})
	return dial{{.ServiceName}}OptsMergedDefault
}

var {{.ServiceNameLowerCamel}}Default = &{{.ServiceName}}{}

func {{.ServiceName}}Rpc() *{{.ServiceName}} {
	return {{.ServiceNameLowerCamel}}Default
}

func New{{.ServiceName}}Rpc(dialOpts ...grpc.DialOption) *{{.ServiceName}} {
	return &{{.ServiceName}}{
		dialOpts: dialOpts,
	}
}

type {{.ServiceName}} struct {
	c        {{.ServiceName}}Client
	conn     *grpc.ClientConn
	once     sync.Once
	mu       sync.RWMutex
	dialOpts []grpc.DialOption
}

func (s *{{.ServiceName}}) Close() error {
	err := s.conn.Close()
	if err != nil {
		return err
	}
	return nil
}

func (s *{{.ServiceName}}) prepareConn() error {
	var err error
	s.once.Do(func() {
		var conn *grpc.ClientConn
		opts := s.dialOpts
		if opts == nil {
			opts = GetDial{{.ServiceName}}Opts()
		}
		conn, err = grpc.NewClient("{{.ResolveSchema}}:///{{.ServiceNamespace}}.{{.ServiceName}}", opts...)
		if err != nil {
			return
		}
		s.conn = conn
		s.c = New{{.ServiceName}}Client(conn)
	})
	if err != nil {
		return err
	}
	return nil
}

`

var rpcFileServiceUnaryMethodTemplate = `
func (s *{{.ServiceName}}) {{.MethodName}}(ctx context.Context, in *{{.Req}}, opts ...grpc.CallOption) (*{{.Resp}}, error) {
	if err := s.prepareConn(); err != nil {
		return nil, err
	}

	return s.c.{{.MethodName}}(ctx, in, opts...)
}

`

var rpcFileServiceServerStreamMethodTemplate = `
func (s *{{.ServiceName}}) {{.MethodName}}(ctx context.Context, in *{{.Req}}, opts ...grpc.CallOption) (grpc.ServerStreamingClient[{{.Resp}}], error) {
	if err := s.prepareConn(); err != nil {
		return nil, err
	}
	return s.c.{{.MethodName}}(ctx, in, opts...)
}

`

var rpcFileServiceClientStreamMethodTemplate = `
func (s *{{.ServiceName}}) {{.MethodName}}(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[{{.Req}}, {{.Resp}}], error) {
	if err := s.prepareConn(); err != nil {
		return nil, err
	}
	return s.c.{{.MethodName}}(ctx, opts...)
}

`

var rpcFileServiceBothStreamMethodTemplate = `
func (s *{{.ServiceName}}) {{.MethodName}}(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[{{.Req}}, {{.Resp}}], error) {
	if err := s.prepareConn(); err != nil {
		return nil, err
	}
	return s.c.{{.MethodName}}(ctx, opts...)
}

`
