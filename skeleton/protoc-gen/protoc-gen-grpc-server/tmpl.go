package main

var mainFileTemplate = `package main

import (
	"context"
	"fmt"
	"log"

	"{{.ServiceImportPath}}"
	"{{.ServiceServerImportPath}}/handler"
	"{{.ServiceServerImportPath}}/boot"
	"github.com/995933447/microgosuit"
	"github.com/995933447/microgosuit/discovery"

	"google.golang.org/grpc"
)

func main() {
	err := microgosuit.InitSuitWithGrpc(context.TODO(), "", "{{.GrpcResolveSchema}}", "{{.DiscoverPrefix}}")
	if err != nil {
		log.Fatal(err)
	}

	port, err := GetListenRpcPort()
	if err != nil {
		log.Fatal(err)
	}

	if err = boot.OnBoot(); err != nil {
		log.Fatal(err)
	}

	err = microgosuit.ServeGrpc(context.TODO(), &microgosuit.ServeGrpcReq{
		RegDiscoverKeyPrefix: "{{.DiscoverPrefix}}",
		SrvNames:             ServiceNames,
		IpVar:                "$inner_ip",
		Port:                 port,
		EnabledHealth:        {{.EnabledHealth}},
		RegisterCustomServiceServerFunc: func(server *grpc.Server) error {
			{{- $prefix := .ServiceNamespace -}}
			{{- range .ServiceNames }}
            {{$prefix}}.Register{{.}}Server(server, &handler.{{.}}{})
        	{{- end }}
        	return nil
		},
		OnReady: func(server *grpc.Server, node *discovery.Node) {
			fmt.Printf("up node %s:%d!\n", node.Host, node.Port)
			fmt.Printf(">>>>>>>>>>>>>>> run %+v at 2025-09-29 10:16:12 success <<<<<<<<<<<<<<<", ServiceNames)
		},
	})
	if err != nil {
		log.Fatal(err)
	}
}
`

var bootFileTemplate = `package boot

func OnBoot() error {
	// TODO. init app and delete this line
	return nil
}
`

var modNamesFileTemplate = `// Code generated by protoc-gen-grpc-server. DO NOT EDIT.
package main

import "github.com/995933447/microgosuit"

func init() {
	microgosuit.SetModuleName("{{.ServiceNamespace}}")
}

var ServiceNames = []string{
	{{- $prefix := .ServiceNamespace -}}
	{{- range .ServiceNames }}
	"{{$prefix}}.{{.}}",
	{{- end }}
}
`

var portFileTemplate = `// Code generated by protoc-gen-grpc-server. DO NOT EDIT.
package main

import (
	"github.com/995933447/microgosuit/skeleton"
	{{- if ne .RpcPort "0" }}
	"{{.EnumImportPath}}"
	{{- end }}
)

var rpcPort = {{.RpcPort}}

func GetListenRpcPort() (int, error) {
	if rpcPort > 0 {
		return rpcPort, nil
	}

	port, err := skeleton.RandomAvailableRpcPort()
	if err != nil {
		return 0, err
	}

	rpcPort = port

	return rpcPort, nil
}
`

var serviceHandlerFileTemplate = `package handler

import (
	"{{.ServiceClientImportPath}}"
)

type {{.ServiceName}} struct {
	{{.ServiceClientPackage}}.Unimplemented{{.ServiceName}}Server
}
`
var serviceHandlerUnaryMethodFileTemplate = `package handler

import (
	{{- range .Imports }}
    "{{.}}"
    {{- end }}
)

func (s *{{.ServiceName}}) {{.MethodName}}(ctx context.Context, req *{{.Req}}) (*{{.Resp}}, error) {
	var resp {{.Resp}}
	return &resp, nil
}
`

var serviceHandlerServerStreamMethodFileTemplate = `package handler

import (
	{{- range .Imports }}
    "{{.}}"
    {{- end }}
)

func (s *{{.ServiceName}}) {{.MethodName}}(req *{{.Req}}, stream grpc.ServerStreamingServer[{{.Resp}}]) error {
	return nil
}
`

var serviceHandlerClientStreamMethodFileTemplate = `package handler

import (
	{{- range .Imports }}
    "{{.}}"
    {{- end }}
)

func (s *{{.ServiceName}}) {{.MethodName}}(stream grpc.ClientStreamingServer[{{.Req}}, {{.Resp}}]) error {
	return nil
}
`

var serviceHandlerBothStreamMethodFileTemplate = `package handler

import (
	{{- range .Imports }}
    "{{.}}"
    {{- end }}
)

func (s *{{.ServiceName}}) {{.MethodName}}(stream grpc.BidiStreamingServer[{{.Req}}, {{.Resp}}]) error {
	return nil
}
`
